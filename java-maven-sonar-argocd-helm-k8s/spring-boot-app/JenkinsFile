pipeline {
    agent {
        docker {
            // Use an official or semi-official image with Maven and JDK 17
            image 'maven:3.9-eclipse-temurin-17' // Example: Maven 3.9 + Eclipse Temurin JDK 17
            // OR image 'maven:3-openjdk-17'      // Example: Maven 3 + OpenJDK 17
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Keep args if needed for Docker-in-Docker
        }
    }
    stages {
        // ... your stages remain the same ...

        // Add a quick check stage (optional but helpful for debugging)
        stage('Check Versions') {
            steps {
                 sh 'java -version'
                 sh 'mvn -v'
            }
        }

        stage('Checkout') {
            steps {
                // Your checkout steps
                // Make sure the checkout happens correctly
                checkout scm
                // Or your specific git command if needed
            }
        }
        stage('Build and Test') {
            steps {
                // Ensure you are in the correct directory after checkout
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                   sh 'mvn clean package'
                }
            }
        }
        stage('Static Code Analysis') {
            environment {
               // SONAR_URL environment variable is not used in your command
            }
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                   // Make sure SONAR_TOKEN is defined as a Jenkins credential, e.g., 'sonar-token-id'
                   withCredentials([string(credentialsId: 'sonar-token-id', variable: 'SONAR_TOKEN_CRED')]) {
                       sh 'mvn clean verify -X sonar:sonar -Dsonar.host.url=http://65.2.148.65:9000 -Dsonar.token=${SONAR_TOKEN_CRED}'
                   }
                }
            }
        }
        stage('Build and Push Docker Image') {
             environment {
                 DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
                 REGISTRY_CREDENTIALS = credentials('docker-cred') // This doesn't assign it directly, use withCredentials
             }
             steps {
                 dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') { // Ensure you are in the correct directory
                    script {
                        // Define dockerImage *before* the withRegistry block
                        def dockerImage = docker.build("${DOCKER_IMAGE}", ".") // Pass context '.'
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') { // Use credential ID directly
                            dockerImage.push()
                        }
                    }
                 }
             }
        }
        // ... rest of your stages (Update Deployment File)
        // Make sure the `sed` command path is relative to the workspace root after checkout
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
                GIT_USER_NAME = "iam-veeramalla"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                    git config user.email "abhishek.xyz@gmail.com"
                    git config user.name "Abhishek Veeramalla"
                    # Make sure the path is correct relative to workspace root
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
                }
            }
        }
    }
}
