pipeline {
  agent {
    docker {
      image 'maven:3.9-eclipse-temurin-17'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Check Versions') { // Optional: Good for debugging
        steps {
            sh 'java -version'
            sh 'mvn -v'
        }
    }
    stage('Checkout') {
      steps {
        echo 'Checking out code...'
        // Assuming Pipeline is configured 'Pipeline script from SCM' which performs checkout automatically.
        // If not, add: checkout scm
        // Or uncomment and fix your specific git step:
        // git branch: 'main', url: 'https://github.com/kaustav2608/Jenkins-Zero-To-Hero.git' // Ensure this is your correct repo
      }
    }
    stage('Build and Test') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') { // Use dir step
            sh 'mvn clean package' // Package includes compile and test
        }
      }
    }
    stage('Static Code Analysis') {
      // No environment block needed here if URL is hardcoded below
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') { // Use dir step
            withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
              // Add back verify and use the credential variable for the token
              sh 'mvn clean verify sonar:sonar -Dsonar.host.url=http://65.2.148.65:9000 -Dsonar.token=${SONAR_AUTH_TOKEN}'
            }
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        // Only define variables needed directly here
        DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') { // Use dir step
            script {
                // Use docker.build for better integration
                def dockerImage = docker.build("${DOCKER_IMAGE}", ".") // '.' specifies build context is current dir
                docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') { // Use credential ID directly
                    dockerImage.push()
                }
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero" // Make sure this is the correct repo name
            GIT_USER_NAME = "iam-veeramalla"     // Make sure this is the correct user/org name
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    # Ensure git commands run in the root of the checkout
                    git config --global user.email "abhishek.veeramalla@example.com" # Use a real or distinct email
                    git config --global user.name "Abhishek Veeramalla (Jenkins)" # Be specific about the committer
                    
                    # Ensure path to deployment file is correct from workspace root
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    
                    # Check if there are changes to commit
                    if git diff --staged --quiet; then
                      echo "No changes to commit."
                    else
                      git commit -m "Update deployment image to version ${BUILD_NUMBER} [ci skip]" # Add [ci skip] if needed
                      git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    fi
                '''
            }
        }
    }
  }
}
